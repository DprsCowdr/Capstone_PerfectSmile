/**
 * Records Management JavaScript Module
 * Handles all patient records modal functionality and interactions
 */

class RecordsManagement {
    constructor() {
        this.currentPatientId = null;
        this.modalDental3DViewer = null;
        this.baseUrl = window.BASE_URL || '';
        this.init();
    }

    init() {
        this.setupEventListeners();
    }

    setupEventListeners() {
        document.addEventListener('DOMContentLoaded', () => {
            this.setupModalEventListeners();
        });
    }

    setupModalEventListeners() {
        const modal = document.getElementById('patientRecordsModal');
        if (modal) {
            // Handle escape key and outside clicks
            document.addEventListener('keydown', (event) => {
                if (event.key === 'Escape' && !modal.classList.contains('hidden')) {
                    this.closePatientRecordsModal();
                }
            });
            
            // Handle clicks outside modal
            modal.addEventListener('click', (event) => {
                if (event.target === modal) {
                    this.closePatientRecordsModal();
                }
            });
            
            // Initialize modal resize functionality
            this.initializeModalResize();
        }
    }

    // ==================== MODAL OPERATIONS ====================

    openPatientRecordsModal(patientId) {
        const modal = document.getElementById('patientRecordsModal');
        const modalDialog = modal.querySelector('.resizable-modal');
        
        // Show modal with fade in
        modal.classList.remove('hidden');
        
        // Trigger smooth entrance animation
        requestAnimationFrame(() => {
            modalDialog.style.opacity = '1';
            modalDialog.style.transform = 'scale(1)';
        });
        
        // Load patient basic info
        this.loadPatientInfo(patientId);
        
        // Store patient ID for later use
        this.currentPatientId = patientId;
        
        // Show basic info tab by default
        this.showRecordTab('basic-info');
        
        // Initialize resize functionality after modal is shown
        setTimeout(() => {
            this.initializeModalResize();
            this.addModalCenteringHelper();
        }, 100);
    }

    addModalCenteringHelper() {
        // Add double-click to center modal
        const modal = document.querySelector('.resizable-modal');
        const header = document.querySelector('.modal-header-resizable');
        
        if (header && modal) {
            header.addEventListener('dblclick', () => {
                if (!modal.classList.contains('fullscreen')) {
                    this.centerModal();
                }
            });
        }
    }
    
    centerModal() {
        const modal = document.querySelector('.resizable-modal');
        const modalContainer = document.querySelector('.modal-container');
        
        if (modal && modalContainer) {
            // Reset to centered position
            modal.style.position = '';
            modal.style.top = '';
            modal.style.left = '';
            modal.style.transform = '';
            modal.style.margin = '';
            
            // Re-enable flex centering
            modalContainer.style.display = 'flex';
            modalContainer.style.alignItems = 'center';
            modalContainer.style.justifyContent = 'center';
        }
    }

    closePatientRecordsModal() {
        const modal = document.getElementById('patientRecordsModal');
        const modalDialog = modal.querySelector('.resizable-modal');
        
        // Smooth exit animation
        modalDialog.style.opacity = '0';
        modalDialog.style.transform = 'scale(0.95)';
        
        // Hide modal after animation
        setTimeout(() => {
            modal.classList.add('hidden');
            // Clean up 3D viewer resources
            this.cleanupModal3DViewer();
            // Clear content
            document.getElementById('modalContent').innerHTML = `
                <div class="flex items-center justify-center h-32">
                    <div class="text-center">
                        <i class="fas fa-spinner fa-spin text-2xl text-blue-500 mb-2"></i>
                        <p class="text-gray-600">Loading patient information...</p>
                    </div>
                </div>
            `;
            // Reset modal size
            this.resetModalSize();
        }, 300);
    }

    // ==================== MODAL RESIZE FUNCTIONALITY ====================
    
    initializeModalResize() {
        const modal = document.querySelector('.resizable-modal');
        const header = document.querySelector('.modal-header-resizable');
        const fullscreenBtn = document.getElementById('fullscreenToggle');
        
        if (!modal || !header) return;
        
        // Make modal draggable
        this.makeDraggable(modal, header);
        
        // Handle fullscreen toggle
        if (fullscreenBtn) {
            fullscreenBtn.addEventListener('click', () => this.toggleFullscreen());
        }
    }
    
    makeDraggable(element, handle) {
        let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
        
        handle.addEventListener('mousedown', (e) => {
            e.preventDefault();
            
            // Don't allow dragging in fullscreen mode
            if (element.classList.contains('fullscreen')) {
                return;
            }
            
            // Switch to fixed positioning for dragging
            const rect = element.getBoundingClientRect();
            element.style.position = 'fixed';
            element.style.top = rect.top + 'px';
            element.style.left = rect.left + 'px';
            element.style.margin = '0';
            
            pos3 = e.clientX;
            pos4 = e.clientY;
            
            const dragMouseMove = (e) => {
                e.preventDefault();
                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;
                pos3 = e.clientX;
                pos4 = e.clientY;
                
                const newTop = element.offsetTop - pos2;
                const newLeft = element.offsetLeft - pos1;
                
                // Get element dimensions
                const elementRect = element.getBoundingClientRect();
                const elementWidth = elementRect.width;
                const elementHeight = elementRect.height;
                
                // Keep modal within viewport bounds with better constraints
                const minTop = 0;
                const maxTop = window.innerHeight - Math.min(elementHeight, 100); // At least 100px visible
                const minLeft = -(elementWidth - 200); // Allow 200px to remain visible on left
                const maxLeft = window.innerWidth - 200; // At least 200px visible on right
                
                if (newTop >= minTop && newTop <= maxTop) {
                    element.style.top = newTop + "px";
                }
                if (newLeft >= minLeft && newLeft <= maxLeft) {
                    element.style.left = newLeft + "px";
                }
            };
            
            const dragMouseUp = () => {
                document.removeEventListener('mousemove', dragMouseMove);
                document.removeEventListener('mouseup', dragMouseUp);
                
                // Disable container flex centering when manually positioned
                const modalContainer = document.querySelector('.modal-container');
                if (modalContainer) {
                    modalContainer.style.display = 'block';
                }
            };
            
            document.addEventListener('mousemove', dragMouseMove);
            document.addEventListener('mouseup', dragMouseUp);
        });
    }
    
    toggleFullscreen() {
        const modal = document.querySelector('.resizable-modal');
        const modalContainer = document.querySelector('.modal-container');
        const fullscreenBtn = document.getElementById('fullscreenToggle');
        
        if (!modal || !fullscreenBtn || !modalContainer) return;
        
        if (modal.classList.contains('fullscreen')) {
            // Exit fullscreen - restore to centered position
            modal.classList.remove('fullscreen');
            
            // Reset all positioning styles to use CSS defaults
            modal.style.position = '';
            modal.style.top = '';
            modal.style.left = '';
            modal.style.width = '90%';
            modal.style.height = '85vh';
            modal.style.maxWidth = '1200px';
            modal.style.minWidth = '800px';
            modal.style.transform = '';
            modal.style.zIndex = '';
            
            // Ensure container is back to flex centering
            modalContainer.style.display = 'flex';
            modalContainer.style.alignItems = 'center';
            modalContainer.style.justifyContent = 'center';
            
            fullscreenBtn.innerHTML = '<i class="fas fa-expand"></i>';
            fullscreenBtn.title = 'Fullscreen';
        } else {
            // Enter fullscreen
            modal.classList.add('fullscreen');
            
            // Set fixed positioning for fullscreen
            modal.style.position = 'fixed';
            modal.style.top = '0';
            modal.style.left = '0';
            modal.style.width = '100vw';
            modal.style.height = '100vh';
            modal.style.maxWidth = 'none';
            modal.style.minWidth = 'none';
            modal.style.transform = 'none';
            modal.style.zIndex = '9999';
            
            // Disable flex centering for fullscreen
            modalContainer.style.display = 'block';
            
            fullscreenBtn.innerHTML = '<i class="fas fa-compress"></i>';
            fullscreenBtn.title = 'Exit Fullscreen';
        }
    }
    
    resetModalSize() {
        const modal = document.querySelector('.resizable-modal');
        const modalContainer = document.querySelector('.modal-container');
        
        if (modal) {
            modal.classList.remove('fullscreen');
            
            // Reset all positioning to use CSS defaults (centered)
            modal.style.position = '';
            modal.style.top = '';
            modal.style.left = '';
            modal.style.width = '90%';
            modal.style.height = '85vh';
            modal.style.maxWidth = '1200px';
            modal.style.minWidth = '800px';
            modal.style.transform = '';
            modal.style.opacity = '1';
            modal.style.zIndex = '';
            
            // Ensure container uses flex centering
            if (modalContainer) {
                modalContainer.style.display = 'flex';
                modalContainer.style.alignItems = 'center';
                modalContainer.style.justifyContent = 'center';
            }
        }
    }

    showRecordTab(tabType) {
        const modalContent = document.getElementById('modalContent');
        
        // Add loading transition
        modalContent.classList.add('modal-content-loading');
        
        // Update active tab with smooth transitions
        document.querySelectorAll('.record-tab').forEach(tab => {
            tab.classList.remove('bg-blue-600', 'text-white');
            tab.classList.add('bg-gray-100', 'text-gray-700');
        });
        
        const activeTab = document.getElementById(`${tabType}-tab`);
        if (activeTab) {
            activeTab.classList.remove('bg-gray-100', 'text-gray-700');
            activeTab.classList.add('bg-blue-600', 'text-white');
        }
        
        // Load appropriate content with smooth transition
        const patientId = this.currentPatientId;
        
        // Add a small delay for smooth transition
        setTimeout(() => {
            switch(tabType) {
                case 'basic-info':
                    this.loadPatientInfo(patientId);
                    break;
                case 'dental-records':
                    this.loadDentalRecords(patientId);
                    break;
                case 'dental-chart':
                    this.loadDentalChart(patientId);
                    break;
                case 'appointments':
                    this.loadAppointments(patientId);
                    break;
                case 'treatments':
                    this.loadTreatments(patientId);
                    break;
                case 'medical-records':
                    this.loadMedicalRecords(patientId);
                    break;
                default:
                    console.warn('Unknown tab type:', tabType);
            }
            
            // Remove loading state after content loads
            setTimeout(() => {
                modalContent.classList.remove('modal-content-loading');
                modalContent.classList.add('modal-content-loaded');
            }, 200);
        }, 150);
    }

    // ==================== DATA LOADING METHODS ====================

    async loadPatientInfo(patientId) {
        try {
            const response = await fetch(`${this.baseUrl}/admin/patient-info/${patientId}`);
            const data = await response.json();
            
            if (data.success) {
                this.displayPatientInfo(data.patient);
            } else {
                this.showAlert(data.message || 'Failed to load patient information', 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            this.showAlert('An error occurred while loading patient information', 'error');
        }
    }

    async loadDentalRecords(patientId) {
        document.getElementById('modalContent').innerHTML = '<div class="text-center py-4"><i class="fas fa-spinner fa-spin"></i> Loading dental records...</div>';
        
        try {
            const response = await fetch(`${this.baseUrl}/admin/patient-dental-records/${patientId}`);
            const data = await response.json();
            
            if (data.success) {
                this.displayDentalRecords(data.records);
            } else {
                this.showAlert(data.message || 'Failed to load dental records', 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            this.showAlert('An error occurred while loading dental records', 'error');
        }
    }

    async loadDentalChart(patientId) {
        document.getElementById('modalContent').innerHTML = '<div class="text-center py-4"><i class="fas fa-spinner fa-spin"></i> Loading dental chart...</div>';
        
        try {
            console.log(`🔍 Loading dental chart for patient ID: ${patientId}`);
            console.log(`📡 API URL: ${this.baseUrl}/admin/patient-dental-chart/${patientId}`);
            
            const response = await fetch(`${this.baseUrl}/admin/patient-dental-chart/${patientId}`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                credentials: 'same-origin' // Include cookies for session
            });
            
            console.log(`📊 Response status: ${response.status}`);
            console.log(`📊 Response headers:`, response.headers);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                const responseText = await response.text();
                console.error('❌ Non-JSON response received:', responseText.substring(0, 500));
                throw new Error('Server returned non-JSON response. This may indicate an authentication issue.');
            }
            
            const data = await response.json();
            console.log('✅ API response received:', data);
            
            if (data.success) {
                console.log('✅ API call successful, displaying dental chart');
                this.displayDentalChart(data);
            } else {
                console.error('❌ API returned success=false:', data.message);
                this.showAlert(data.message || 'Failed to load dental chart', 'error');
            }
        } catch (error) {
            console.error('❌ Error loading dental chart:', error);
            
            // Show detailed error message to help with debugging
            const errorMessage = `
                <div class="text-center py-8">
                    <i class="fas fa-exclamation-triangle text-red-500 text-3xl mb-4"></i>
                    <h3 class="text-lg font-semibold text-red-600 mb-2">Failed to Load Dental Chart</h3>
                    <p class="text-gray-600 mb-4">Error: ${error.message}</p>
                    <div class="text-sm text-gray-500 mb-4">
                        <p>Patient ID: ${patientId}</p>
                        <p>API URL: ${this.baseUrl}/admin/patient-dental-chart/${patientId}</p>
                    </div>
                    <button onclick="recordsManager.loadDentalChart(${patientId})" 
                            class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
                        <i class="fas fa-redo mr-2"></i>Retry
                    </button>
                </div>
            `;
            
            document.getElementById('modalContent').innerHTML = errorMessage;
        }
    }

    async loadAppointments(patientId) {
        document.getElementById('modalContent').innerHTML = '<div class="text-center py-4"><i class="fas fa-spinner fa-spin"></i> Loading appointments...</div>';
        
        try {
            console.log('Loading appointments for patient:', patientId);
            console.log('Base URL:', this.baseUrl);
            
            const url = `${this.baseUrl}/admin/patient-appointments/${patientId}`;
            console.log('Fetching from URL:', url);
            
            const response = await fetch(url);
            console.log('Response status:', response.status);
            
            const data = await response.json();
            console.log('Response data:', data);
            
            if (data.success) {
                this.displayAppointments(data);
            } else {
                console.error('Failed to load appointments:', data.message);
                this.showAlert(data.message || 'Failed to load appointments', 'error');
            }
        } catch (error) {
            console.error('Error loading appointments:', error);
            this.showAlert('An error occurred while loading appointments', 'error');
        }
    }

    async loadTreatments(patientId) {
        document.getElementById('modalContent').innerHTML = '<div class="text-center py-4"><i class="fas fa-spinner fa-spin"></i> Loading treatments...</div>';
        
        try {
            const response = await fetch(`${this.baseUrl}/admin/patient-treatments/${patientId}`);
            const data = await response.json();
            
            if (data.success) {
                this.displayTreatments(data);
            } else {
                this.showAlert(data.message || 'Failed to load treatments', 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            this.showAlert('An error occurred while loading treatments', 'error');
        }
    }

    async loadMedicalRecords(patientId) {
        document.getElementById('modalContent').innerHTML = '<div class="text-center py-4"><i class="fas fa-spinner fa-spin"></i> Loading medical records...</div>';
        
        try {
            console.log('Loading medical records for patient:', patientId);
            console.log('Base URL:', this.baseUrl);
            
            const url = `${this.baseUrl}/admin/patient-medical-records/${patientId}`;
            console.log('Fetching from URL:', url);
            
            const response = await fetch(url);
            console.log('Response status:', response.status);
            
            const data = await response.json();
            console.log('Response data:', data);
            
            if (data.success) {
                this.displayMedicalRecords(data);
            } else {
                console.error('Failed to load medical records:', data.message);
                this.showAlert(data.message || 'Failed to load medical records', 'error');
            }
        } catch (error) {
            console.error('Error loading medical records:', error);
            this.showAlert('An error occurred while loading medical records', 'error');
        }
    }

    // ==================== DISPLAY METHODS ====================

    displayPatientInfo(patient) {
        const content = `
            <div class="bg-white">
                <!-- Patient Header -->
                <div class="bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-lg mb-6">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center mr-6">
                                <i class="fas fa-user fa-3x text-blue-600"></i>
                            </div>
                            <div>
                                <h2 class="text-2xl font-bold text-gray-800">${patient.name}</h2>
                                <p class="text-gray-600 text-lg">Patient ID: ${patient.id}</p>
                                <div class="flex items-center mt-2">
                                    <span class="px-3 py-1 text-sm font-semibold rounded-full ${
                                        patient.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                                    }">${patient.status || 'Active'}</span>
                                    <span class="ml-3 px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-full">
                                        <i class="fas fa-calendar mr-1"></i>
                                        Patient since ${patient.created_at ? new Date(patient.created_at).getFullYear() : 'N/A'}
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="text-right">
                            <button onclick="window.print()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg mr-2 transition-colors">
                                <i class="fas fa-print mr-2"></i>Print Records
                            </button>
                            <button onclick="recordsManager.exportPatientData(${patient.id})" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors">
                                <i class="fas fa-download mr-2"></i>Export PDF
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Personal Information Section -->
                <div class="mb-8">
                    <div class="flex items-center mb-4">
                        <i class="fas fa-user-circle text-blue-600 text-xl mr-3"></i>
                        <h3 class="text-xl font-bold text-gray-800">Personal Information</h3>
                    </div>
                    <div class="bg-gray-50 rounded-lg p-6">
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Full Name</label>
                                    <p class="text-gray-900 font-semibold">${patient.name || 'N/A'}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Date of Birth</label>
                                    <p class="text-gray-900">${patient.date_of_birth ? new Date(patient.date_of_birth).toLocaleDateString() : 'N/A'}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Age</label>
                                    <p class="text-gray-900">${patient.age || 'N/A'} years old</p>
                                </div>
                            </div>
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Email Address</label>
                                    <p class="text-gray-900">${patient.email || 'N/A'}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Phone Number</label>
                                    <p class="text-gray-900">${patient.phone || 'N/A'}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Gender</label>
                                    <p class="text-gray-900">${patient.gender ? patient.gender.charAt(0).toUpperCase() + patient.gender.slice(1) : 'N/A'}</p>
                                </div>
                            </div>
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Occupation</label>
                                    <p class="text-gray-900">${patient.occupation || 'N/A'}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Emergency Contact</label>
                                    <p class="text-gray-900">${patient.emergency_contact || 'N/A'}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Insurance Provider</label>
                                    <p class="text-gray-900">${patient.insurance_provider || 'N/A'}</p>
                                </div>
                            </div>
                        </div>
                        <div class="mt-6">
                            <label class="block text-sm font-medium text-gray-600 mb-1">Address</label>
                            <p class="text-gray-900">${patient.address || 'N/A'}</p>
                        </div>
                    </div>
                </div>

                <!-- Medical History Section -->
                <div class="mb-8">
                    <div class="flex items-center mb-4">
                        <i class="fas fa-file-medical text-red-600 text-xl mr-3"></i>
                        <h3 class="text-xl font-bold text-gray-800">Medical History</h3>
                    </div>
                    <div class="bg-red-50 rounded-lg p-6">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Primary Physician</label>
                                    <p class="text-gray-900">${patient.physician_name || 'Not specified'}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Physician Specialty</label>
                                    <p class="text-gray-900">${patient.physician_specialty || 'Not specified'}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Physician Contact</label>
                                    <p class="text-gray-900">${patient.physician_phone || 'Not provided'}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Blood Pressure</label>
                                    <p class="text-gray-900">${patient.blood_pressure || 'Not recorded'}</p>
                                </div>
                            </div>
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Allergies</label>
                                    <p class="text-gray-900">${patient.allergies || 'None reported'}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Current Medications</label>
                                    <p class="text-gray-900">${patient.medications || 'None reported'}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Tobacco Use</label>
                                    <p class="text-gray-900">${patient.tobacco_use === 'yes' ? 'Yes' : patient.tobacco_use === 'no' ? 'No' : 'Not specified'}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">General Health Status</label>
                                    <p class="text-gray-900">${patient.good_health === 'yes' ? 'Good Health' : patient.good_health === 'no' ? 'Health Issues Reported' : 'Not specified'}</p>
                                </div>
                            </div>
                        </div>
                        ${patient.medical_conditions ? `
                        <div class="mt-6">
                            <label class="block text-sm font-medium text-gray-600 mb-2">Medical Conditions</label>
                            <div class="bg-white rounded-lg p-4">
                                <p class="text-gray-900">${patient.medical_conditions}</p>
                            </div>
                        </div>
                        ` : ''}
                    </div>
                </div>

                <!-- Dental History Section -->
                <div class="mb-8">
                    <div class="flex items-center mb-4">
                        <div class="flex items-center">
                            <i class="fas fa-tooth text-blue-600 text-xl mr-3"></i>
                            <h3 class="text-xl font-bold text-gray-800">Dental History</h3>
                        </div>
                    </div>
                    <div class="bg-blue-50 rounded-lg p-6">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Previous Dentist</label>
                                    <p class="text-gray-900">${patient.previous_dentist || 'Not specified'}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Last Dental Visit</label>
                                    <p class="text-gray-900">${patient.last_dental_visit ? new Date(patient.last_dental_visit).toLocaleDateString() : 'Not specified'}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Dental Concerns</label>
                                    <p class="text-gray-900">${patient.dental_concerns || 'None reported'}</p>
                                </div>
                            </div>
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Brushing Frequency</label>
                                    <p class="text-gray-900">${patient.brushing_frequency || 'Not specified'}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Flossing Frequency</label>
                                    <p class="text-gray-900">${patient.flossing_frequency || 'Not specified'}</p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-600 mb-1">Dental Pain/Sensitivity</label>
                                    <p class="text-gray-900">${patient.dental_pain === 'yes' ? 'Yes' : patient.dental_pain === 'no' ? 'No' : 'Not specified'}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Recent Records Summary -->
                <div class="mb-8">
                    <div class="flex items-center mb-4">
                        <div class="flex items-center">
                            <i class="fas fa-clipboard-list text-green-600 text-xl mr-3"></i>
                            <h3 class="text-xl font-bold text-gray-800">Recent Visits Summary</h3>
                        </div>
                    </div>
                    <div class="bg-green-50 rounded-lg p-6">
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                            <div class="text-center">
                                <div class="text-3xl font-bold text-green-600">${patient.total_visits || '0'}</div>
                                <div class="text-sm text-gray-600">Total Visits</div>
                            </div>
                            <div class="text-center">
                                <div class="text-3xl font-bold text-blue-600">${patient.last_visit_date ? new Date(patient.last_visit_date).toLocaleDateString() : 'N/A'}</div>
                                <div class="text-sm text-gray-600">Last Visit</div>
                            </div>
                            <div class="text-center">
                                <div class="text-3xl font-bold text-purple-600">${patient.next_appointment_date ? new Date(patient.next_appointment_date).toLocaleDateString() : 'N/A'}</div>
                                <div class="text-sm text-gray-600">Next Appointment</div>
                            </div>
                        </div>
                        ${patient.last_diagnosis ? `
                        <div class="mt-6 bg-white rounded-lg p-4">
                            <label class="block text-sm font-medium text-gray-600 mb-2">Last Diagnosis</label>
                            <p class="text-gray-900">${patient.last_diagnosis}</p>
                        </div>
                        ` : ''}
                    </div>
                </div>

                <!-- Notes Section -->
                <div class="mb-6">
                    <div class="flex items-center mb-4">
                        <i class="fas fa-sticky-note text-indigo-600 text-xl mr-3"></i>
                        <h3 class="text-xl font-bold text-gray-800">Patient Notes & Special Instructions</h3>
                    </div>
                    <div class="bg-indigo-50 rounded-lg p-6">
                        <div class="bg-white rounded-lg p-4" data-patient-notes>
                            <p class="text-gray-900">${patient.special_notes || 'No special notes recorded for this patient.'}</p>
                        </div>
                        <div class="mt-4 flex justify-end">
                            <button onclick="recordsManager.editNotes(${patient.id})" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg text-sm transition-colors">
                                <i class="fas fa-edit mr-1"></i>Edit Notes
                            </button>
                        </div>
                    </div>
                </div>

            </div>
        `;
        
        document.getElementById('modalContent').innerHTML = content;
    }

    displayDentalRecords(records) {
        let content = '<div class="bg-white p-6"><h3 class="text-lg font-bold mb-4">Dental Records</h3>';
        
        if (records.length === 0) {
            content += '<p class="text-gray-500 text-center py-8">No dental records found</p>';
        } else {
            content += '<div class="space-y-4">';
            records.forEach(record => {
                content += `
                    <div class="border rounded-lg p-4">
                        <div class="flex justify-between items-start mb-2">
                            <h4 class="font-semibold">${new Date(record.record_date).toLocaleDateString()}</h4>
                            <span class="text-sm text-gray-600">Dr. ${record.dentist_name}</span>
                        </div>
                        ${record.chief_complaint ? `<p class="text-sm mb-2"><strong>Chief Complaint:</strong> ${record.chief_complaint}</p>` : ''}
                        ${record.treatment ? `<p class="text-sm mb-2"><strong>Treatment:</strong> ${record.treatment}</p>` : ''}
                        ${record.notes ? `<p class="text-sm text-gray-600">${record.notes}</p>` : ''}
                    </div>
                `;
            });
            content += '</div>';
        }
        
        content += '</div>';
        document.getElementById('modalContent').innerHTML = content;
    }

    displayDentalChart(chartResponse) {
        let content = `
        <div class="bg-white p-6">
            <h3 class="text-lg font-bold mb-4">
                <i class="fas fa-chart-line text-blue-500 mr-2"></i>
                Dental Chart
                <span class="text-sm font-normal text-gray-600 ml-2">(View Only - for Administrative Review)</span>
            </h3>
            
            <!-- Enhanced 3D Dental Model Viewer -->
            <div class="bg-gray-50 rounded-lg p-6">
                <h4 class="font-semibold text-gray-800 mb-4 text-center">
                    <i class="fas fa-cube text-blue-500 mr-2"></i>
                    Interactive 3D Dental Model
                </h4>
                
                <!-- Instructions -->
                <div class="bg-blue-50 rounded-lg p-3 mb-4 text-sm text-blue-800">
                    <div class="flex items-start">
                        <i class="fas fa-info-circle mt-0.5 mr-2"></i>
                        <div>
                            <strong>Instructions:</strong> Click and drag to rotate • Scroll to zoom • Hover over teeth to see checkup details
                        </div>
                    </div>
                </div>
                
                <div class="dental-3d-viewer relative" id="dentalModalViewer" style="height: 500px;">
                    <div class="model-loading text-center py-8" id="modalModelLoading">
                        <i class="fas fa-spinner fa-spin text-2xl mb-2 text-blue-500"></i>
                        <p class="text-gray-600">Loading 3D Model...</p>
                    </div>
                    <div class="model-error hidden text-center py-8" id="modalModelError">
                        <i class="fas fa-exclamation-triangle text-red-500 text-2xl mb-2"></i>
                        <p class="text-red-600 mb-2">Failed to load 3D model</p>
                        <button onclick="recordsManager.initModalDental3D()" class="px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600">
                            Retry
                        </button>
                    </div>
                    <canvas class="dental-3d-canvas"></canvas>
                    
                    <!-- Enhanced Model Controls -->
                    <div class="model-controls" style="position: absolute; top: 10px; right: 10px; display: flex; flex-direction: column; gap: 8px;">
                        <button class="model-control-btn" onclick="recordsManager.modalDental3DViewer?.resetCamera()" title="Reset View" style="padding: 8px; background: rgba(0,0,0,0.7); color: white; border: none; border-radius: 4px; cursor: pointer;">
                            <i class="fas fa-home"></i>
                        </button>
                        <button class="model-control-btn" onclick="recordsManager.modalDental3DViewer?.toggleWireframe()" title="Toggle Wireframe" style="padding: 8px; background: rgba(0,0,0,0.7); color: white; border: none; border-radius: 4px; cursor: pointer;">
                            <i class="fas fa-border-all"></i>
                        </button>
                        <button class="model-control-btn" onclick="recordsManager.modalDental3DViewer?.toggleAutoRotate()" title="Auto Rotate" style="padding: 8px; background: rgba(0,0,0,0.7); color: white; border: none; border-radius: 4px; cursor: pointer;">
                            <i class="fas fa-sync-alt"></i>
                        </button>
                    </div>
                </div>
                
                <!-- Enhanced 3D Model Color Legend -->
                <div class="mt-6 p-4 bg-white rounded-lg border">
                    <h5 class="text-sm font-semibold text-gray-700 mb-3 text-center">
                        <i class="fas fa-palette text-blue-500 mr-2"></i>
                        Tooth Condition Color Legend
                    </h5>
                    <div class="grid grid-cols-2 md:grid-cols-3 gap-3 text-sm">
                        <div class="flex items-center">
                            <div class="w-4 h-4 bg-green-400 rounded mr-2 border"></div>
                            <span><i class="fas fa-check-circle text-green-500 mr-1"></i>Healthy</span>
                        </div>
                        <div class="flex items-center">
                            <div class="w-4 h-4 bg-red-500 rounded mr-2 border"></div>
                            <span><i class="fas fa-exclamation-triangle text-red-500 mr-1"></i>Cavity</span>
                        </div>
                        <div class="flex items-center">
                            <div class="w-4 h-4 bg-yellow-500 rounded mr-2 border"></div>
                            <span><i class="fas fa-circle text-yellow-500 mr-1"></i>Filled</span>
                        </div>
                        <div class="flex items-center">
                            <div class="w-4 h-4 bg-purple-500 rounded mr-2 border"></div>
                            <span><i class="fas fa-crown text-purple-500 mr-1"></i>Crown</span>
                        </div>
                        <div class="flex items-center">
                            <div class="w-4 h-4 bg-gray-800 rounded mr-2 border"></div>
                            <span><i class="fas fa-times-circle text-gray-600 mr-1"></i>Missing</span>
                        </div>
                        <div class="flex items-center">
                            <div class="w-4 h-4 bg-blue-500 rounded mr-2 border"></div>
                            <span><i class="fas fa-stethoscope text-blue-500 mr-1"></i>Root Canal</span>
                        </div>
                    </div>
                    
                    <!-- Enhanced interaction hints -->
                    <div class="mt-4 pt-3 border-t border-gray-200">
                        <div class="text-xs text-gray-600 space-y-1">
                            <div><i class="fas fa-mouse-pointer text-blue-500 mr-2"></i><strong>Hover:</strong> View detailed condition information</div>
                            <div><i class="fas fa-hand-pointer text-green-500 mr-2"></i><strong>Click:</strong> See complete tooth history</div>
                            <div><i class="fas fa-eye-slash text-gray-500 mr-2"></i><strong>Missing teeth:</strong> Hidden from view (not colored)</div>
                        </div>
                    </div>
                </div>
                
                <!-- Detailed Conditions Summary Panel -->
                <div class="mt-6 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200" id="conditionsSummaryPanel">
                    <h5 class="text-sm font-semibold text-gray-700 mb-3 flex items-center">
                        <i class="fas fa-chart-bar text-blue-500 mr-2"></i>
                        Dental Conditions Summary
                        <button onclick="recordsManager.toggleConditionsDetail()" class="ml-auto text-xs bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600" id="conditionsToggleBtn">
                            Show Details
                        </button>
                    </h5>
                    
                    <div id="conditionsSummaryContent" class="text-sm">
                        <div class="text-center text-gray-500 py-2">
                            <i class="fas fa-spinner fa-spin mr-2"></i>
                            Loading conditions summary...
                        </div>
                    </div>
                    
                    <div id="conditionsDetailContent" class="hidden mt-4 pt-4 border-t border-blue-200">
                        <!-- Detailed conditions will be populated here -->
                    </div>
                </div>`;
        
        // Add summary of records if available
        if (chartResponse.chart && chartResponse.chart.length > 0) {
            content += `
                <div class="mt-4 p-4 bg-gray-50 rounded-lg">
                    <h5 class="text-sm font-semibold text-gray-700 mb-2">Chart Summary</h5>
                    <div class="grid grid-cols-3 gap-4 text-center text-sm">
                        <div>
                            <div class="text-lg font-bold text-blue-600">${chartResponse.chart.length}</div>
                            <div class="text-gray-600">Total Records</div>
                        </div>
                        <div>
                            <div class="text-lg font-bold text-green-600">${Object.keys(chartResponse.teeth_data || {}).length}</div>
                            <div class="text-gray-600">Teeth Recorded</div>
                        </div>
                        <div>
                            <div class="text-lg font-bold text-orange-600">${chartResponse.chart.filter(r => r.created_at && new Date(r.created_at) > new Date(Date.now() - 30*24*60*60*1000)).length}</div>
                            <div class="text-gray-600">Recent (30 days)</div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        content += `
            </div>
        </div>
        `;
        
        document.getElementById('modalContent').innerHTML = content;
        
        // Initialize 3D viewer after content is loaded
        setTimeout(() => {
            this.initModalDental3D(chartResponse);
        }, 100);
    }

    displayAppointments(appointmentData) {
        let content = `
            <div class="bg-white p-6">
                <h3 class="text-lg font-bold mb-4">
                    <i class="fas fa-calendar-alt text-blue-500 mr-2"></i>
                    Appointments
                </h3>
        `;
        
        // Combine present and past appointments
        const allAppointments = [
            ...(appointmentData.present_appointments || []),
            ...(appointmentData.past_appointments || [])
        ];
        
        if (allAppointments.length === 0) {
            content += '<p class="text-gray-500 text-center py-8">No appointments found</p>';
        } else {
            // Show present appointments first
            if (appointmentData.present_appointments && appointmentData.present_appointments.length > 0) {
                content += '<div class="mb-6">';
                content += '<h4 class="text-md font-semibold text-green-600 mb-3"><i class="fas fa-calendar-check mr-2"></i>Upcoming Appointments</h4>';
                content += '<div class="space-y-3">';
                appointmentData.present_appointments.forEach(appointment => {
                    content += this.renderAppointmentCard(appointment, 'upcoming');
                });
                content += '</div></div>';
            }
            
            // Show past appointments
            if (appointmentData.past_appointments && appointmentData.past_appointments.length > 0) {
                content += '<div class="mb-4">';
                content += '<h4 class="text-md font-semibold text-gray-600 mb-3"><i class="fas fa-history mr-2"></i>Past Appointments</h4>';
                content += '<div class="space-y-3 max-h-64 overflow-y-auto">';
                appointmentData.past_appointments.forEach(appointment => {
                    content += this.renderAppointmentCard(appointment, 'past');
                });
                content += '</div></div>';
            }
        }
        
        content += '</div>';
        document.getElementById('modalContent').innerHTML = content;
    }

    renderAppointmentCard(appointment, type) {
        const isPast = type === 'past';
        const cardClass = isPast ? 'border-gray-200 bg-gray-50' : 'border-green-200 bg-green-50';
        
        return `
            <div class="border rounded-lg p-4 ${cardClass}">
                <div class="flex justify-between items-start mb-2">
                    <div>
                        <h4 class="font-semibold">${this.formatDate(appointment.appointment_datetime)}</h4>
                        <p class="text-sm text-gray-600">${new Date(appointment.appointment_datetime).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</p>
                    </div>
                    <span class="px-2 py-1 text-xs font-semibold rounded-full ${
                        appointment.status === 'completed' ? 'bg-green-100 text-green-800' :
                        appointment.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                        appointment.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-blue-100 text-blue-800'
                    }">${appointment.status}</span>
                </div>
                ${appointment.services ? `<p class="text-sm mb-2"><strong>Services:</strong> ${appointment.services}</p>` : ''}
                ${appointment.dentist_name ? `<p class="text-sm mb-2"><strong>Doctor:</strong> Dr. ${appointment.dentist_name}</p>` : ''}
                ${appointment.branch_name ? `<p class="text-sm mb-2"><strong>Branch:</strong> ${appointment.branch_name}</p>` : ''}
                ${appointment.total_cost ? `<p class="text-sm mb-2"><strong>Total Cost:</strong> ₱${parseFloat(appointment.total_cost).toLocaleString()}</p>` : ''}
                ${appointment.notes ? `<p class="text-sm text-gray-600">${appointment.notes}</p>` : ''}
            </div>
        `;
    }

    displayTreatments(treatmentData) {
        let content = `
            <div class="bg-white p-6">
                <h3 class="text-lg font-bold mb-4">
                    <i class="fas fa-medical-kit text-blue-500 mr-2"></i>
                    Treatments
                </h3>
        `;
        
        if (treatmentData.treatments.length === 0) {
            content += '<p class="text-gray-500 text-center py-8">No treatments found</p>';
        } else {
            content += '<div class="space-y-4">';
            treatmentData.treatments.forEach(treatment => {
                content += `
                    <div class="border rounded-lg p-4">
                        <div class="flex justify-between items-start mb-2">
                            <h4 class="font-semibold">${treatment.treatment_name}</h4>
                            <span class="text-sm text-gray-600">${this.formatDate(treatment.treatment_date)}</span>
                        </div>
                        <p class="text-sm mb-2"><strong>Doctor:</strong> Dr. ${treatment.dentist_name}</p>
                        <p class="text-sm mb-2"><strong>Status:</strong> 
                            <span class="px-2 py-1 text-xs font-semibold rounded-full ${
                                treatment.status === 'completed' ? 'bg-green-100 text-green-800' :
                                treatment.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :
                                'bg-yellow-100 text-yellow-800'
                            }">${treatment.status}</span>
                        </p>
                        ${treatment.notes ? `<p class="text-sm text-gray-600">${treatment.notes}</p>` : ''}
                    </div>
                `;
            });
            content += '</div>';
        }
        
        content += '</div>';
        document.getElementById('modalContent').innerHTML = content;
    }

    displayMedicalRecords(medicalData) {
        let content = `
            <div class="bg-white p-6">
                <h3 class="text-lg font-bold mb-4">
                    <i class="fas fa-file-medical text-blue-500 mr-2"></i>
                    Medical Records
                </h3>
        `;
        
        // Check if we have medical records data
        const medicalRecords = medicalData.medical_records || [];
        const diagnoses = medicalData.diagnoses || [];
        const xrays = medicalData.xrays || [];
        
        if (medicalRecords.length === 0 && diagnoses.length === 0) {
            content += '<p class="text-gray-500 text-center py-8">No medical records found</p>';
        } else {
            // Display patient basic info if available
            if (medicalData.patient_info) {
                content += `
                    <div class="bg-blue-50 rounded-lg p-4 mb-6">
                        <h4 class="font-semibold text-blue-800 mb-2">Patient Information</h4>
                        <div class="grid grid-cols-2 gap-4 text-sm">
                            <div><strong>Name:</strong> ${medicalData.patient_info.name || 'N/A'}</div>
                            <div><strong>Age:</strong> ${medicalData.patient_info.age || 'N/A'}</div>
                            <div><strong>Gender:</strong> ${medicalData.patient_info.gender || 'N/A'}</div>
                            <div><strong>Date of Birth:</strong> ${medicalData.patient_info.date_of_birth || 'N/A'}</div>
                        </div>
                    </div>
                `;
            }
            
            // Display diagnoses summary
            if (diagnoses.length > 0) {
                content += `
                    <div class="mb-6">
                        <h4 class="font-semibold text-gray-800 mb-3">
                            <i class="fas fa-stethoscope text-red-500 mr-2"></i>Recent Diagnoses
                        </h4>
                        <div class="space-y-3">
                `;
                diagnoses.slice(0, 5).forEach(diagnosis => {
                    content += `
                        <div class="border border-red-200 rounded-lg p-3 bg-red-50">
                            <div class="flex justify-between items-start mb-2">
                                <span class="font-medium text-red-800">${diagnosis.diagnosis}</span>
                                <span class="text-sm text-gray-500">${this.formatDate(diagnosis.date)}</span>
                            </div>
                            ${diagnosis.treatment ? `<p class="text-sm text-gray-700"><strong>Treatment:</strong> ${diagnosis.treatment}</p>` : ''}
                        </div>
                    `;
                });
                content += '</div></div>';
            }
            
            // Display X-rays if available
            if (xrays.length > 0) {
                content += `
                    <div class="mb-6">
                        <h4 class="font-semibold text-gray-800 mb-3">
                            <i class="fas fa-x-ray text-blue-500 mr-2"></i>X-Ray Records (${xrays.length})
                        </h4>
                        <div class="grid grid-cols-2 gap-4">
                `;
                xrays.slice(0, 4).forEach(xray => {
                    content += `
                        <div class="border rounded-lg p-3">
                            <div class="text-sm font-medium">${this.formatDate(xray.date)}</div>
                            ${xray.notes ? `<div class="text-xs text-gray-600 mt-1">${xray.notes}</div>` : ''}
                            ${xray.image_url ? `<a href="${xray.image_url}" target="_blank" class="text-blue-600 text-xs hover:underline">View X-Ray</a>` : ''}
                        </div>
                    `;
                });
                content += '</div></div>';
            }
            
            // Display detailed medical records
            if (medicalRecords.length > 0) {
                content += `
                    <div class="mb-4">
                        <h4 class="font-semibold text-gray-800 mb-3">
                            <i class="fas fa-file-alt text-green-500 mr-2"></i>Detailed Records
                        </h4>
                        <div class="space-y-3 max-h-64 overflow-y-auto">
                `;
                medicalRecords.forEach(record => {
                    content += `
                        <div class="border rounded-lg p-4">
                            <div class="flex justify-between items-start mb-2">
                                <h5 class="font-medium">${record.record_type || 'Medical Record'}</h5>
                                <span class="text-sm text-gray-600">${this.formatDate(record.record_date)}</span>
                            </div>
                            ${record.diagnosis ? `<p class="text-sm mb-2"><strong>Diagnosis:</strong> ${record.diagnosis}</p>` : ''}
                            ${record.treatment ? `<p class="text-sm mb-2"><strong>Treatment:</strong> ${record.treatment}</p>` : ''}
                            ${record.notes ? `<p class="text-sm text-gray-600">${record.notes}</p>` : ''}
                            ${record.recorded_by ? `<p class="text-xs text-gray-500 mt-2">Recorded by: ${record.recorded_by}</p>` : ''}
                        </div>
                    `;
                });
                content += '</div></div>';
            }
            
            // Summary
            if (medicalData.summary) {
                content += `
                    <div class="mt-6 pt-4 border-t">
                        <div class="grid grid-cols-3 gap-4 text-center">
                            <div class="bg-gray-50 rounded-lg p-3">
                                <div class="text-lg font-bold text-gray-800">${medicalData.summary.total_records}</div>
                                <div class="text-xs text-gray-600">Total Records</div>
                            </div>
                            <div class="bg-gray-50 rounded-lg p-3">
                                <div class="text-lg font-bold text-gray-800">${medicalData.summary.total_diagnoses}</div>
                                <div class="text-xs text-gray-600">Diagnoses</div>
                            </div>
                            <div class="bg-gray-50 rounded-lg p-3">
                                <div class="text-lg font-bold text-gray-800">${medicalData.summary.total_xrays}</div>
                                <div class="text-xs text-gray-600">X-Rays</div>
                            </div>
                        </div>
                    </div>
                `;
            }
        }
        
        content += '</div>';
        document.getElementById('modalContent').innerHTML = content;
    }

    // ==================== 3D VIEWER METHODS ====================

    initModalDental3D(chartData) {
        const container = document.getElementById('dentalModalViewer');
        if (!container) return;

        const canvas = container.querySelector('.dental-3d-canvas');
        const loadingEl = document.getElementById('modalModelLoading');
        const errorEl = document.getElementById('modalModelError');

        if (!canvas) return;

        try {
            // Check if Three.js is available
            if (typeof THREE === 'undefined') {
                throw new Error('Three.js library not loaded');
            }

            // Cleanup existing viewer
            this.cleanupModal3DViewer();

            // Show loading
            loadingEl?.classList.remove('hidden');
            errorEl?.classList.add('hidden');

                // Initialize the 3D viewer for enhanced interactive mode
            this.modalDental3DViewer = new window.Dental3DViewer('dentalModalViewer', {
                modelUrl: this.baseUrl + '/img/permanent_dentition-2.glb',
                width: canvas.offsetWidth || 400,
                height: canvas.offsetHeight || 300,
                autoRotate: false,
                showControls: true,
                backgroundColor: 0xf8f9fa,
                enableToothSelection: true, // ENABLED for detailed view
                enableHover: true, // Enable hover tooltips
                onToothHover: (toothNumber, toothData) => {
                    console.log(`Hovering over tooth ${toothNumber}`, toothData);
                },
                onToothClick: (toothNumber, clickPoint, event, details) => {
                    console.log('🦷 Tooth clicked:', toothNumber, details);
                    // Show detailed tooth information modal with proper tooth name
                    const toothData = details.toothData || [];
                    const toothName = details.toothName || `Tooth ${toothNumber}`;
                    this.showToothDetails(toothNumber, JSON.stringify(toothData), toothName);
                }
            });
            
            // Initialize the viewer
            if (this.modalDental3DViewer.init()) {
                console.log('3D Dental viewer initialized successfully');
                
                // DISABLED DEBUG MODE - Only use real checkup data
                // Debug mode was interfering with actual checkup data display
                console.log('🔧 DEBUG MODE DISABLED - Using only real checkup data');
                
                // Wait for 3D model to fully load before applying tooth data
                setTimeout(() => {
                    this.applyChartDataToViewer(chartData);
                }, 2000); // Give model time to load
                
                // Hide loading on success
                setTimeout(() => {
                    loadingEl?.classList.add('hidden');
                }, 1000);
                
            } else {
                throw new Error('Failed to initialize 3D viewer');
            }

        } catch (error) {
            console.error('Error initializing modal 3D viewer:', error);
            loadingEl?.classList.add('hidden');
            errorEl?.classList.remove('hidden');
        }
    }

    // Apply actual checkup data to the 3D viewer
    applyChartDataToViewer(chartData) {
        console.log('🎯 APPLYING REAL CHECKUP DATA TO 3D VIEWER');
        console.log('chartData received:', chartData);
        
        if (!this.modalDental3DViewer) {
            console.error('❌ 3D viewer not available');
            return;
        }

        if (!chartData || !chartData.teeth_data) {
            console.warn('❌ No teeth data available in chartData');
            console.log('Available data:', chartData);
            return;
        }

        console.log('=== APPLYING REAL CHECKUP DATA START ===');
        console.log('teeth_data keys:', Object.keys(chartData.teeth_data));
        
        let appliedCount = 0;
        Object.keys(chartData.teeth_data).forEach(toothNumber => {
            const toothData = chartData.teeth_data[toothNumber];
            console.log(`\n--- REAL DATA: Processing tooth ${toothNumber} ---`);
            console.log('toothData:', toothData);
            
            if (toothData && toothData.length > 0) {
                const latestRecord = toothData[0];
                console.log('Latest checkup record:', latestRecord);
                console.log(`🦷 TOOTH ${toothNumber}: Condition = '${latestRecord.condition}'`);
                
                if (latestRecord.condition === 'missing') {
                    console.log(`👻 HIDING missing tooth ${toothNumber}`);
                    // Hide missing teeth - no color needed
                    try {
                        const result = this.modalDental3DViewer.setToothColor(parseInt(toothNumber), null, true); // null color, true for missing
                        console.log(`✅ SUCCESS: Missing tooth ${toothNumber} hidden, result:`, result);
                        
                        // Additional debug: Check if tooth is actually hidden
                        setTimeout(() => {
                            if (typeof this.modalDental3DViewer.debugVisibleMeshes === 'function') {
                                this.modalDental3DViewer.debugVisibleMeshes();
                            }
                        }, 500);
                        
                        appliedCount++;
                    } catch (error) {
                        console.error(`❌ Error hiding tooth ${toothNumber}:`, error);
                    }
                } else {
                    // Apply color for non-missing teeth
                    const color = this.getToothColor(latestRecord.condition);
                    console.log(`🎨 Color for '${latestRecord.condition}': ${color} (hex: 0x${color.toString(16)})`);
                    
                    // Convert to RGB for 3D viewer
                    const rgbColor = {
                        r: ((color >> 16) & 255) / 255,
                        g: ((color >> 8) & 255) / 255,
                        b: (color & 255) / 255
                    };
                    console.log(`🌈 RGB color:`, rgbColor);
                    
                    // Apply color to 3D model
                    try {
                        console.log(`🎨 Applying color to tooth ${toothNumber}...`);
                        this.modalDental3DViewer.setToothColor(parseInt(toothNumber), rgbColor, false); // false for not missing
                        console.log(`✅ SUCCESS: Color applied to tooth ${toothNumber}`);
                        appliedCount++;
                    } catch (error) {
                        console.error(`❌ Error applying color to tooth ${toothNumber}:`, error);
                    }
                }
                
                // Set hover data for both missing and non-missing teeth
                try {
                    if (typeof this.modalDental3DViewer.setToothData === 'function') {
                        this.modalDental3DViewer.setToothData(parseInt(toothNumber), toothData);
                        console.log(`✅ Hover data set for tooth ${toothNumber}`);
                    }
                } catch (error) {
                    console.error(`❌ Error setting hover data for tooth ${toothNumber}:`, error);
                }
            } else {
                console.log(`⚪ No checkup data for tooth ${toothNumber}`);
            }
        });
        
        console.log(`🎯 COMPLETED: Applied colors to ${appliedCount} teeth based on real checkup data`);
        console.log('=== APPLYING REAL CHECKUP DATA END ===');
        
        // Force a render update
        if (typeof this.modalDental3DViewer.render === 'function') {
            this.modalDental3DViewer.render();
            console.log('🔄 Forced render update');
        }
        
        // Generate conditions summary after applying colors
        this.generateConditionsSummary(groupedData);
    }

    /**
     * Generate and display conditions summary
     */
    generateConditionsSummary(groupedData) {
        const summaryContent = document.getElementById('conditionsSummaryContent');
        if (!summaryContent) return;

        // Count conditions
        const conditionCounts = {};
        const urgentConditions = [];
        const recentTreatments = [];

        Object.keys(groupedData).forEach(toothNumber => {
            const toothData = groupedData[toothNumber];
            if (toothData && toothData.length > 0) {
                const latestRecord = toothData[0];
                const condition = latestRecord.condition;
                
                // Count conditions
                conditionCounts[condition] = (conditionCounts[condition] || 0) + 1;
                
                // Check for urgent conditions
                if (['cavity', 'fractured', 'loose', 'bleeding'].includes(condition) || 
                    (latestRecord.pain_level && latestRecord.pain_level > 6)) {
                    urgentConditions.push({
                        tooth: toothNumber,
                        condition: condition,
                        painLevel: latestRecord.pain_level,
                        notes: latestRecord.notes
                    });
                }
                
                // Check for recent treatments
                if (latestRecord.treatment && latestRecord.created_at) {
                    const recordDate = new Date(latestRecord.created_at);
                    const daysSince = (new Date() - recordDate) / (1000 * 60 * 60 * 24);
                    if (daysSince <= 30) {
                        recentTreatments.push({
                            tooth: toothNumber,
                            treatment: latestRecord.treatment,
                            date: recordDate,
                            daysSince: Math.floor(daysSince)
                        });
                    }
                }
            }
        });

        // Generate summary HTML
        let summaryHtml = '<div class="grid grid-cols-2 md:grid-cols-4 gap-3 text-center">';
        
        const totalTeeth = Object.keys(groupedData).length;
        const healthyTeeth = conditionCounts['healthy'] || 0;
        const problemTeeth = totalTeeth - healthyTeeth;
        
        summaryHtml += `
            <div class="bg-white rounded p-3 border">
                <div class="text-lg font-bold text-blue-600">${totalTeeth}</div>
                <div class="text-xs text-gray-600">Total Recorded</div>
            </div>
            <div class="bg-white rounded p-3 border">
                <div class="text-lg font-bold text-green-600">${healthyTeeth}</div>
                <div class="text-xs text-gray-600">Healthy</div>
            </div>
            <div class="bg-white rounded p-3 border">
                <div class="text-lg font-bold text-red-600">${problemTeeth}</div>
                <div class="text-xs text-gray-600">Need Attention</div>
            </div>
            <div class="bg-white rounded p-3 border">
                <div class="text-lg font-bold text-orange-600">${urgentConditions.length}</div>
                <div class="text-xs text-gray-600">Urgent</div>
            </div>
        `;
        
        summaryHtml += '</div>';
        
        // Add alerts for urgent conditions
        if (urgentConditions.length > 0) {
            summaryHtml += `
                <div class="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
                    <div class="text-sm font-semibold text-red-800 mb-2">
                        <i class="fas fa-exclamation-triangle mr-1"></i>
                        ${urgentConditions.length} Urgent Condition(s) Detected
                    </div>
                    <div class="text-xs text-red-700">
                        Teeth: ${urgentConditions.map(c => `#${c.tooth}`).join(', ')}
                    </div>
                </div>
            `;
        }

        summaryContent.innerHTML = summaryHtml;
        
        // Populate detailed content
        this.populateConditionsDetail(conditionCounts, urgentConditions, recentTreatments);
    }

    /**
     * Populate detailed conditions panel
     */
    populateConditionsDetail(conditionCounts, urgentConditions, recentTreatments) {
        const detailContent = document.getElementById('conditionsDetailContent');
        if (!detailContent) return;

        let detailHtml = '';

        // Conditions breakdown
        if (Object.keys(conditionCounts).length > 0) {
            detailHtml += `
                <div class="mb-4">
                    <h6 class="font-semibold text-gray-700 mb-2">
                        <i class="fas fa-chart-pie text-blue-500 mr-2"></i>
                        Conditions Breakdown
                    </h6>
                    <div class="grid grid-cols-2 gap-2 text-sm">
            `;
            
            Object.entries(conditionCounts).forEach(([condition, count]) => {
                const icon = this.getConditionIcon(condition);
                const color = this.getConditionColor(condition);
                detailHtml += `
                    <div class="flex items-center justify-between bg-white p-2 rounded border">
                        <span><i class="${icon} ${color} mr-1"></i>${this.getConditionDisplayName(condition)}</span>
                        <span class="font-bold">${count}</span>
                    </div>
                `;
            });
            
            detailHtml += '</div></div>';
        }

        // Urgent conditions detail
        if (urgentConditions.length > 0) {
            detailHtml += `
                <div class="mb-4">
                    <h6 class="font-semibold text-red-700 mb-2">
                        <i class="fas fa-exclamation-triangle text-red-500 mr-2"></i>
                        Urgent Conditions
                    </h6>
                    <div class="space-y-2">
            `;
            
            urgentConditions.forEach(urgent => {
                detailHtml += `
                    <div class="bg-red-50 border border-red-200 p-3 rounded text-sm">
                        <div class="font-semibold text-red-800">Tooth #${urgent.tooth}</div>
                        <div class="text-red-700">Condition: ${this.getConditionDisplayName(urgent.condition)}</div>
                        ${urgent.painLevel ? `<div class="text-red-600">Pain Level: ${urgent.painLevel}/10</div>` : ''}
                        ${urgent.notes ? `<div class="text-gray-600 text-xs mt-1">${urgent.notes}</div>` : ''}
                    </div>
                `;
            });
            
            detailHtml += '</div></div>';
        }

        // Recent treatments
        if (recentTreatments.length > 0) {
            detailHtml += `
                <div class="mb-4">
                    <h6 class="font-semibold text-green-700 mb-2">
                        <i class="fas fa-clock text-green-500 mr-2"></i>
                        Recent Treatments (Last 30 Days)
                    </h6>
                    <div class="space-y-2">
            `;
            
            recentTreatments.forEach(treatment => {
                detailHtml += `
                    <div class="bg-green-50 border border-green-200 p-3 rounded text-sm">
                        <div class="font-semibold text-green-800">Tooth #${treatment.tooth}</div>
                        <div class="text-green-700">${treatment.treatment}</div>
                        <div class="text-gray-600 text-xs">${treatment.daysSince} days ago</div>
                    </div>
                `;
            });
            
            detailHtml += '</div></div>';
        }

        detailContent.innerHTML = detailHtml;
    }

    /**
     * Toggle conditions detail panel
     */
    toggleConditionsDetail() {
        const detailContent = document.getElementById('conditionsDetailContent');
        const toggleBtn = document.getElementById('conditionsToggleBtn');
        
        if (!detailContent || !toggleBtn) return;

        if (detailContent.classList.contains('hidden')) {
            detailContent.classList.remove('hidden');
            toggleBtn.textContent = 'Hide Details';
        } else {
            detailContent.classList.add('hidden');
            toggleBtn.textContent = 'Show Details';
        }
    }

    /**
     * Helper methods for condition display
     */
    getConditionIcon(condition) {
        const icons = {
            'healthy': 'fas fa-check-circle',
            'cavity': 'fas fa-exclamation-triangle',
            'filled': 'fas fa-circle',
            'crown': 'fas fa-crown',
            'root_canal': 'fas fa-stethoscope',
            'missing': 'fas fa-times-circle',
            'fractured': 'fas fa-bolt',
            'loose': 'fas fa-arrows-alt',
            'default': 'fas fa-tooth'
        };
        return icons[condition] || icons.default;
    }

    getConditionColor(condition) {
        const colors = {
            'healthy': 'text-green-500',
            'cavity': 'text-red-500',
            'filled': 'text-yellow-500',
            'crown': 'text-purple-500',
            'root_canal': 'text-blue-500',
            'missing': 'text-gray-500',
            'fractured': 'text-orange-500',
            'loose': 'text-yellow-600',
            'default': 'text-gray-400'
        };
        return colors[condition] || colors.default;
    }

    getConditionDisplayName(condition) {
        const names = {
            'healthy': 'Healthy',
            'cavity': 'Cavity',
            'filled': 'Filled',
            'crown': 'Crown',
            'root_canal': 'Root Canal',
            'missing': 'Missing',
            'fractured': 'Fractured',
            'loose': 'Loose',
            'default': 'Unknown'
        };
        return names[condition] || (condition ? condition.charAt(0).toUpperCase() + condition.slice(1) : names.default);
    }

    cleanupModal3DViewer() {
        if (this.modalDental3DViewer) {
            try {
                this.modalDental3DViewer.destroy();
            } catch (error) {
                console.warn('Error destroying modal 3D viewer:', error);
            }
            this.modalDental3DViewer = null;
        }
    }

    getToothColor(condition) {
        const colors = {
            'healthy': 0x00FF00,      // Bright green
            'cavity': 0xFF0000,       // Bright red
            'filled': 0xFFD700,       // Gold
            'crown': 0x9932CC,        // Dark orchid
            'root_canal': 0x1E90FF,   // Dodger blue
            'default': 0xDCDCDC       // Gainsboro
            // Note: 'missing' teeth are hidden, not colored
        };
        return colors[condition] || colors.default;
    }

    // ==================== UTILITY METHODS ====================

    showToothDetails(toothNumber, toothDataString, toothName = null) {
        try {
            const toothData = JSON.parse(toothDataString);
            const displayName = toothName || `Tooth ${toothNumber}`;
            
            let detailsHtml = `
                <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div class="bg-white rounded-lg max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
                        <div class="sticky top-0 bg-white border-b p-4 flex justify-between items-center">
                            <h3 class="text-xl font-bold flex items-center">
                                <i class="fas fa-tooth text-blue-500 mr-3"></i>
                                <div class="flex flex-col">
                                    <span>${displayName}</span>
                                    <span class="text-sm text-gray-600 font-normal">Tooth #${toothNumber} - Complete History</span>
                                </div>
                            </h3>
                            <button onclick="this.closest('.fixed').remove()" class="text-gray-500 hover:text-gray-700 text-xl">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        
                        <div class="p-6">
            `;
            
            if (toothData.length === 0) {
                detailsHtml += `
                    <div class="text-center py-8">
                        <i class="fas fa-search text-gray-400 text-4xl mb-4"></i>
                        <p class="text-gray-500 text-lg">No records found for this tooth.</p>
                        <p class="text-gray-400 text-sm mt-2">This tooth has not been examined yet.</p>
                    </div>
                `;
            } else {
                // Summary section
                const latestRecord = toothData[0];
                const conditionIcon = this.getConditionIcon(latestRecord.condition);
                const conditionColor = this.getConditionColor(latestRecord.condition);
                
                detailsHtml += `
                    <div class="mb-6 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
                        <h4 class="font-semibold text-gray-800 mb-3">
                            <i class="fas fa-info-circle text-blue-500 mr-2"></i>
                            Current Status
                        </h4>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div class="text-center">
                                <div class="text-2xl ${conditionColor} mb-1">
                                    <i class="${conditionIcon}"></i>
                                </div>
                                <div class="font-semibold">${this.getConditionDisplayName(latestRecord.condition)}</div>
                                <div class="text-sm text-gray-600">Current Condition</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-gray-700 mb-1">${toothData.length}</div>
                                <div class="font-semibold">Records</div>
                                <div class="text-sm text-gray-600">Total Examinations</div>
                            </div>
                            <div class="text-center">
                                <div class="text-lg font-bold text-gray-700 mb-1">
                                    ${this.formatDate(latestRecord.created_at)}
                                </div>
                                <div class="font-semibold">Last Exam</div>
                                <div class="text-sm text-gray-600">
                                    ${latestRecord.dentist_name ? `Dr. ${latestRecord.dentist_name}` : 'Unknown Doctor'}
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                // Treatment alerts
                if (latestRecord.condition !== 'healthy') {
                    const urgencyClass = ['cavity', 'fractured', 'loose', 'bleeding'].includes(latestRecord.condition) ? 'border-red-200 bg-red-50' : 'border-yellow-200 bg-yellow-50';
                    const urgencyIcon = ['cavity', 'fractured', 'loose', 'bleeding'].includes(latestRecord.condition) ? 'fas fa-exclamation-triangle text-red-500' : 'fas fa-info-circle text-yellow-500';
                    
                    detailsHtml += `
                        <div class="mb-6 p-4 ${urgencyClass} rounded-lg border">
                            <h4 class="font-semibold mb-2">
                                <i class="${urgencyIcon} mr-2"></i>
                                Treatment Information
                            </h4>
                            ${latestRecord.treatment ? `
                                <div class="mb-2">
                                    <strong>Recommended Treatment:</strong> ${latestRecord.treatment}
                                </div>
                            ` : ''}
                            ${latestRecord.follow_up_date ? `
                                <div class="mb-2">
                                    <strong>Follow-up Date:</strong> ${this.formatDate(latestRecord.follow_up_date)}
                                </div>
                            ` : ''}
                            ${latestRecord.pain_level !== undefined && latestRecord.pain_level !== null ? `
                                <div class="mb-2">
                                    <strong>Pain Level:</strong> ${latestRecord.pain_level}/10
                                    <div class="w-full bg-gray-200 rounded-full h-2 mt-1">
                                        <div class="bg-red-500 h-2 rounded-full" style="width: ${latestRecord.pain_level * 10}%"></div>
                                    </div>
                                </div>
                            ` : ''}
                        </div>
                    `;
                }

                // History timeline
                detailsHtml += `
                    <div class="mb-6">
                        <h4 class="font-semibold text-gray-800 mb-4">
                            <i class="fas fa-history text-blue-500 mr-2"></i>
                            Examination History
                        </h4>
                        <div class="space-y-4">
                `;
                
                toothData.forEach((record, index) => {
                    const isLatest = index === 0;
                    const recordIcon = this.getConditionIcon(record.condition);
                    const recordColor = this.getConditionColor(record.condition);
                    
                    detailsHtml += `
                        <div class="border-l-4 ${isLatest ? 'border-blue-500 bg-blue-50' : 'border-gray-300 bg-gray-50'} p-4 rounded-r-lg">
                            <div class="flex justify-between items-start mb-2">
                                <div class="flex items-center">
                                    <span class="${recordColor} text-lg mr-2">
                                        <i class="${recordIcon}"></i>
                                    </span>
                                    <span class="font-semibold ${isLatest ? 'text-blue-800' : 'text-gray-800'}">
                                        ${this.getConditionDisplayName(record.condition)}
                                        ${isLatest ? '<span class="text-xs bg-blue-500 text-white px-2 py-1 rounded ml-2">Current</span>' : ''}
                                    </span>
                                </div>
                                <div class="text-right text-sm text-gray-600">
                                    <div>${this.formatDate(record.created_at)}</div>
                                    ${record.dentist_name ? `<div>Dr. ${record.dentist_name}</div>` : ''}
                                </div>
                            </div>
                            
                            ${record.treatment ? `
                                <div class="mb-2 text-sm">
                                    <strong class="text-green-700">
                                        <i class="fas fa-stethoscope mr-1"></i>Treatment:
                                    </strong> 
                                    ${record.treatment}
                                </div>
                            ` : ''}
                            
                            ${record.notes ? `
                                <div class="mb-2 text-sm">
                                    <strong class="text-gray-700">
                                        <i class="fas fa-clipboard mr-1"></i>Notes:
                                    </strong> 
                                    ${record.notes}
                                </div>
                            ` : ''}
                            
                            ${record.pain_level !== undefined && record.pain_level !== null ? `
                                <div class="text-sm">
                                    <strong class="text-red-700">
                                        <i class="fas fa-heartbeat mr-1"></i>Pain Level:
                                    </strong> 
                                    ${record.pain_level}/10
                                </div>
                            ` : ''}
                        </div>
                    `;
                });
                
                detailsHtml += '</div></div>';
            }
            
            detailsHtml += `
                        </div>
                        <div class="sticky bottom-0 bg-gray-50 border-t p-4 flex justify-end">
                            <button onclick="this.closest('.fixed').remove()" class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors">
                                <i class="fas fa-times mr-2"></i>Close
                            </button>
                        </div>
                    </div>
                </div>
            `;
            
            // Add to body
            document.body.insertAdjacentHTML('beforeend', detailsHtml);
        } catch (error) {
            console.error('Error showing tooth details:', error);
            // Show error modal
            const errorModal = `
                <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
                        <div class="text-center">
                            <i class="fas fa-exclamation-triangle text-red-500 text-4xl mb-4"></i>
                            <h3 class="text-lg font-bold text-red-800 mb-2">Error Loading Details</h3>
                            <p class="text-gray-600 mb-4">Unable to load tooth details. Please try again.</p>
                            <button onclick="this.closest('.fixed').remove()" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">
                                Close
                            </button>
                        </div>
                    </div>
                </div>
            `;
            document.body.insertAdjacentHTML('beforeend', errorModal);
        }
    }

    formatDate(dateString) {
        if (!dateString) return 'N/A';
        try {
            return new Date(dateString).toLocaleDateString();
        } catch (error) {
            return dateString;
        }
    }

    getStatusClass(status) {
        switch(status) {
            case 'completed':
                return 'border-green-200';
            case 'cancelled':
                return 'border-red-200';
            case 'pending':
                return 'border-yellow-200';
            default:
                return 'border-gray-200';
        }
    }

    showAlert(message, type = 'info') {
        // Create alert element
        const alertDiv = document.createElement('div');
        alertDiv.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
            type === 'error' ? 'bg-red-100 text-red-800 border border-red-300' :
            type === 'success' ? 'bg-green-100 text-green-800 border border-green-300' :
            'bg-blue-100 text-blue-800 border border-blue-300'
        }`;
        
        alertDiv.innerHTML = `
            <div class="flex items-center">
                <i class="fas ${
                    type === 'error' ? 'fa-exclamation-circle' :
                    type === 'success' ? 'fa-check-circle' :
                    'fa-info-circle'
                } mr-2"></i>
                <span>${message}</span>
                <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-lg">&times;</button>
            </div>
        `;
        
        document.body.appendChild(alertDiv);
        
        // Auto remove after 5 seconds
        setTimeout(() => {
            if (alertDiv.parentNode) {
                alertDiv.remove();
            }
        }, 5000);
    }

    // ==================== RECORD MANAGEMENT METHODS ====================

    async deleteRecord(recordId) {
        if (!confirm('Are you sure you want to delete this record? This action cannot be undone.')) {
            return;
        }

        try {
            const response = await fetch(`${this.baseUrl}/admin/dental/delete-record/${recordId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });

            const data = await response.json();

            if (data.success) {
                this.showAlert('Record deleted successfully', 'success');
                // Reload the page to refresh the records list
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            } else {
                this.showAlert(data.message || 'Failed to delete record', 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            this.showAlert('An error occurred while deleting the record', 'error');
        }
    }

    // ==================== QUICK ACTION HELPER FUNCTIONS ====================

    exportPatientData(patientId) {
        // Export patient data as PDF
        window.open(`${this.baseUrl}/admin/export-patient-pdf/${patientId}`, '_blank');
    }

    scheduleAppointment(patientId) {
        // Redirect to appointment scheduling with patient pre-selected
        window.location.href = `${this.baseUrl}/admin/appointments/new?patient_id=${patientId}`;
    }

    addTreatment(patientId) {
        // Redirect to treatment creation with patient pre-selected
        window.location.href = `${this.baseUrl}/admin/treatments/new?patient_id=${patientId}`;
    }

    updateMedical(patientId) {
        // Redirect to medical history update
        window.location.href = `${this.baseUrl}/admin/patients/${patientId}/medical-history`;
    }

    generateReport(patientId) {
        // Generate comprehensive patient report
        window.open(`${this.baseUrl}/admin/patient-report/${patientId}`, '_blank');
    }

    editNotes(patientId) {
        // Open notes editing modal or inline edit
        const currentNotes = document.querySelector('[data-patient-notes] p')?.textContent || '';
        const newNotes = prompt('Edit patient notes:', currentNotes === 'No special notes recorded for this patient.' ? '' : currentNotes);
        if (newNotes !== null) {
            this.updatePatientNotes(patientId, newNotes);
        }
    }

    async updatePatientNotes(patientId, notes) {
        try {
            const response = await fetch(`${this.baseUrl}/admin/patient-notes/${patientId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ notes: notes })
            });
            
            const data = await response.json();
            if (data.success) {
                this.showAlert('Patient notes updated successfully', 'success');
                // Refresh the current view
                this.loadPatientInfo(patientId);
            } else {
                this.showAlert(data.message || 'Failed to update notes', 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            this.showAlert('An error occurred while updating notes', 'error');
        }
    }

    // Debug method to test mesh mapping
    addDebugColors() {
        if (!this.modalDental3DViewer) {
            console.log('🚨 No 3D viewer available for debug colors');
            return;
        }
        
        console.log('🌈 Applying debug colors to all meshes...');
        
        // Test colors for each mesh index
        const debugColors = [
            '#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF', '#00FFFF',
            '#FFA500', '#800080', '#008000', '#FFC0CB', '#A52A2A', '#808080',
            '#FFD700', '#FF69B4', '#32CD32', '#8A2BE2', '#FF1493', '#00CED1',
            '#FF4500', '#9ACD32', '#DC143C', '#00BFFF', '#FA8072', '#90EE90',
            '#F0E68C', '#DDA0DD', '#87CEEB', '#F4A460', '#98FB98', '#F5DEB3',
            '#CD853F', '#DCDCDC'
        ];
        
        // Try different tooth numbering systems
        for (let i = 0; i < 32; i++) {
            const color = debugColors[i % debugColors.length];
            const toothNumber = i + 1;
            console.log(`🧪 DEBUG: Setting tooth ${toothNumber} to color ${color}`);
            
            // Convert hex to RGB for 3D viewer
            const rgbColor = {
                r: parseInt(color.slice(1, 3), 16) / 255,
                g: parseInt(color.slice(3, 5), 16) / 255,
                b: parseInt(color.slice(5, 7), 16) / 255
            };
            
            this.modalDental3DViewer.setToothColor(toothNumber, rgbColor);
        }
        
        console.log('🌈 Debug colors applied to teeth 1-32');
    }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    window.recordsManager = new RecordsManagement();
});

// Global function wrappers for backward compatibility
function deleteRecord(recordId) {
    if (window.recordsManager) {
        window.recordsManager.deleteRecord(recordId);
    }
}

// Export for use
window.RecordsManagement = RecordsManagement;
